swagger: "2.0"
info:
  title: User Registration API
  description: API for user registration with JWT access token response
  version: "1.0"
securityDefinitions:
  BearerAuth:
    type: apiKey
    name: Authorization
    in: header
    description: >
      JWT access token. Format: **Bearer &lt;token&gt>**
paths:
  /user/register:
    post:
      summary: Create a new user and return access token
      description: >
        This endpoint allows a user to register by providing a username, email, and password.
        A short-lived access token is returned on success.
      tags:
        - Authentication
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - username
              - email
              - password
            properties:
              username:
                type: string
                example: johndoe
              email:
                type: string
                format: email
                example: johndoe@example.com
              password:
                type: string
                format: password
                example: strongpassword123
      responses:
        200:
          description: User registered successfully
          schema:
            type: object
            properties:
              id:
                type: integer
                example: 1
              username:
                type: string
                example: johndoe
              email:
                type: string
                example: johndoe@example.com
              access_token:
                type: string
                example: eyJ0eXAiOiJKV1QiLCJhbGciOi...
        400:
          description: Invalid input or user already exists
  /user/login:
    post:
      summary: User login
      description: Authenticates a user using either a username or email and a password.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: credentials
          description: User login and password
          required: true
          schema:
            type: object
            required:
              - login
              - password
            properties:
              login:
                type: string
                description: Username or email of the user
                example: johndoe@example.com
              password:
                type: string
                description: User's password
                example: strongpassword123
      responses:
        200:
          description: Successful login
          schema:
            type: object
            properties:
              message:
                type: string
                example: Login successful
              token:
                type: string
                example: eyJhbGciOiJIUzI1...
        400:
          description: Validation error or invalid credentials
          schema:
            type: object
            properties:
              error:
                type: string
                example: Invalid credentials
  /user/me:
      get:
        summary: Get current user
        description: Returns information about the currently authenticated user.
        produces:
          - application/json
        security:
          - BearerAuth: []
        responses:
          200:
            description: User info successfully retrieved
            schema:
              type: object
              properties:
                id:
                  type: integer
                  example: 1
                email:
                  type: string
                  example: johndoe@example.com
                username:
                  type: string
                  example: johndoe
          401:
            description: Unauthorized â€” missing or invalid token
            schema:
              type: object
              properties:
                error:
                  type: string
                  example: Missing Authorization Header
  /landmark:
    post:
      summary: Create a landmark
      description: Creates a new landmark associated with the authenticated user.
      consumes:
        - application/json
      produces:
        - application/json
      security:
        - BearerAuth: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - name
              - location
              - country
            properties:
              name:
                type: string
                example: Eiffel Tower
              description:
                type: string
                example: Iconic iron tower in Paris
              location:
                type: string
                example: Paris, France
              country:
                type: string
                example: France
      responses:
        200:
          description: Landmark successfully created
          schema:
            type: object
            properties:
              id:
                type: integer
              name:
                type: string
              description:
                type: string
              location:
                type: string
              country:
                type: string
        400:
          description: Error during creation
          schema:
            type: object
            properties:
              error:
                type: string
                example: Invalid input
    get:
      summary: List all landmarks
      description: Returns a list of all landmarks for the authenticated user.
      produces:
        - application/json
      security:
        - BearerAuth: []
      responses:
        200:
          description: List of landmarks
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: integer
                  example: 1
                name:
                  type: string
                  example: Eiffel Tower
                country:
                  type: string
                  example: France
        400:
          description: Failed to retrieve landmarks
          schema:
            type: object
            properties:
              error:
                type: string
                example: Unexpected error occurred
  /landmark/{id}:
    put:
      summary: Update a landmark (unimplemented)
      description: Updates a specific landmark. Currently not implemented.
      produces:
        - application/json
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          description: ID of the landmark
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - name
              - location
              - country
            properties:
              name:
                type: string
                example: Eiffel Tower
              description:
                type: string
                example: Iconic iron tower in Paris
              location:
                type: string
                example: Paris, France
              country:
                type: string
                example: France

      responses:
        501:
          description: Not implemented
    get:
      summary: Get a landmark by ID
      description: Returns full details of a single landmark. Requires authentication.
      produces:
        - application/json
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          description: ID of the landmark to retrieve
      responses:
        200:
          description: Landmark data successfully returned
          schema:
            type: object
            properties:
              id:
                type: integer
                example: 3
              name:
                type: string
                example: Statue of Liberty
              description:
                type: string
                example: A colossal neoclassical sculpture on Liberty Island
              location:
                type: string
                example: New York Harbor
              country:
                type: string
                example: USA
        400:
          description: Error occurred
          schema:
            type: object
            properties:
              error:
                type: string
                example: Landmark not found
    delete:
      summary: Delete a landmark
      description: Deletes a landmark belonging to the authenticated user.
      produces:
        - application/json
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          description: ID of the landmark to delete
      responses:
        200:
          description: Landmark successfully deleted
          schema:
            type: object
            properties:
              message:
                type: string
                example: Successfully deleted the landmark.
        400:
          description: Error during deletion
          schema:
            type: object
            properties:
              error:
                type: string
                example: Landmark not found
  /landmark/{id}/photo:
    post:
      summary: Upload a photo
      description: Accepts an image file and stores it.
      security:
        - BearerAuth: []
      consumes:
        - multipart/form-data
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          description: ID of the landmark

        - in: formData
          name: file
          type: file
          required: true
          description: The image file to upload
      responses:
        200:
          description: Photo uploaded successfully
          schema:
            type: object
            properties:
              message:
                type: string
                example: Photo uploaded
              filename:
                type: string
                example: uploaded_123.jpg
        400:
          description: Upload failed
          schema:
            type: object
            properties:
              error:
                type: string
                example: Invalid file
